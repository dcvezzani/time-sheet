### Section

Create project and update local configuration.  Also, update 'application' name for configuration files (a manual process).

```
git clone -b master clean-start time-sheet
cd time-sheet

vim -p ./build-local-database.txt ./build-local-start-scripts.txt
```

Update bundle and run migrations.

```
bundle update
bundle install --binstubs

./bin/rake db:migrate db:migrate:status
```

Test out basics.

```
./bin/rspec

./watchr.sh

./start.sh
./open.sh
```


### Section

```
./bin/rails g scaffold Topic name:string description:text

./bin/rails g backbone:install
./bin/rails g backbone:scaffold Topic name:string description:text
```

I.e., config/routes.rb

```
resources :topics, controller: :topics_bb
resources :topics_orig, controller: :topics
resources :topics_bb, controller: :topics_bb
```


### Section

The ```html``` format is for rendering the initial ```index``` page.  The ```json``` format is used by Backbone to retrieve collections of models.

E.g., app/controllers/topics_bb_controller.rb

```
class TopicsBbController < TopicsController
  # GET /topics
  # GET /topics.json
  def index
    @topics = Topic.all

    respond_to do |format|
      format.html {render 'index_backbone'}
      format.json { render json: @topics }
    end
  end
end
```

Save off a copy of the originally scaffold-generated index page.

```
cp app/view/topics/index.html.rb app/view/topics/index_original.html.rb
```

Bootstrap Backbone to the index view.  Include support for shortcut key to create a new item 
(only activates when index landing zone (lz) exists; e.g., '#topics-table').

E.g., app/view/topics/index_backbone.html.erb

```
<style type="text/css">
  table th.name{
    width: 300px;
  }
  table td.name{
    vertical-align: top;
  }
</style>

<div id="topics"></div>

<script type="text/javascript">
  $(function() {
    // TimeSheet is the app name
    window.router = new TimeSheet.Routers.TopicsRouter({topics: <%= @topics.to_json.html_safe -%>});
    Backbone.history.start();

    $(document).keyup(function(e){
      if($("#topics-table").length > 0){
        switch(e.keyCode){
          case 78:
            //console.log("load new form")
            window.router.navigate("/new", {trigger: true});
            break;
          default:
        }
        //console.log(e.type, e.keyCode)
      }
    })
  });
</script>
```

Set the default index page to use Backbone flavored view.

```
cp app/view/topics/index_backbone.html.rb app/view/topics/index.html.rb
```

### Section

Update Backbone model.  Include configuration to exclude Rails model attributes that are not attr_accessible.  
Point base url to desired controller.

E.g., app/assets/javascripts/backbone/models/topic.js.coffee

```
  paramRoot: 'topic'

  ...

  secureAttributes: [
    'created_at', 'updated_at'
  ]

  toJSON: ->
    @_cloneAttributes();

  _cloneAttributes: ->
    attributes = _.clone(@attributes)
    for sa in @secureAttributes
      delete attributes[sa]
    _.clone(attributes)

  ...

  url: '/topics_bb'
```

### Section

Update item view.  Distinguish 'data' td cells and add confirmation for delete.

E.g., app/assets/javascripts/backbone/views/topics/topic_view.js.coffee

```
  tagName: "tr"
  className: "data"
  ...

  destroy: () ->
    if(confirm("Are you sure?"))
      @model.destroy()
      this.remove()
```


### Section

Update index template to use Twitter Bootstrap design elements.  Reduce the number of empty 'action' th tags to one.

E.g., app/assets/javascripts/backbone/templates/topics/index.js.ejs

```
<div class="well well-outline">
  <div class="page-header">
  <h1>Listing topics <small></small></h1>
  </div>

  <table id="topics-table" class="table table-striped">
    <tr>
      <th class="name">Name</th>
      <th>Description</th>
      <th></th>
    </tr>
  </table>

  <br/>

  <a href="#/new" class="btn btn-primary">New Topic</a>
</div>
``` 

Update item template to use Twitter Bootstrap design elements.  Use icons to represent actions.

E.g., app/assets/javascripts/backbone/templates/topics/topic.js.ejs

```
<td><%= name %></td>
<td><%= description %></td>

<td>
  <div class="control-group">
    <div class="btn-group pull-right">
      <a class="btn" href="#/<%= id %>" title="Show"> <i class="icon-search"></i> <span class="hidden">Show</span> </a>
      <a class="btn edit-spouse-<%= id %>" href="#/<%= id %>/edit" title="Edit"> <i class="icon-pencil"></i> <span class="hidden">Edit</span> </a>
      <a class="btn destroy" href="#/<%= id %>/destroy" title="Destroy"> <i class="icon-trash"></i> <span class="hidden">Destroy</span></a>
    </div>
  </div>
</td>
```

### Section

Update to return back to the index view (instead of the show view).  Put the focus on the first field in the form.

E.g., app/assets/javascripts/backbone/views/topics/new_view.js.coffee

```
  save: (e) ->
  ...
        #window.location.hash = "/#{@model.id}"
        window.location.hash = "/index"
  ...
  render: ->
    ...
    setTimeout(->
      $("input[name='name']").focus()
    50)
```

Update in much the same way as the 'new view', only the method is ```update``` here instead of ```save```.

E.g., app/assets/javascripts/backbone/views/topics/edit_view.js.coffee

```
  update: (e) ->
  ...
        #window.location.hash = "/#{@model.id}"
        window.location.hash = "/index"
  ...
  render: ->
    ...
    setTimeout(->
      $("input[name='name']").focus()
    50)
```

### Section

To use the Rails ERB view files, we configure the ```template``` method to go fetch html through the controller instead of using Backbone's templates.
This enables us to use the Rails view helpers including rendering errors.  This means we need to make some calls manually that would otherwise
be automatic, such as updating the collection of models.  By fetching the collection again, we should be able to see the new entry that was
just created.  In order for post processing to take place after the DOM has been retrieved, we supply a callback to the ```template``` method.

Update the id for the form, as it is slightly different in the scaffold-generated ```_form.html.erb```.

E.g., app/assets/javascripts/backbone/views/topics/new_view.js.coffee

```
class TimeSheet.Views.Topics.NewView extends Backbone.View
  #template: JST["backbone/templates/topics/new"]
  template: (model, callback) -> _.template(
    href = $("#new-topic-from-erb").attr("href")
    console.log("new href: " + href)
    
    $.get(href, (data) ->
      callback(data)
    )
  )
  ...
  events:
    "submit #new_topic": "save"
  ...
  save: (e) ->
    e.preventDefault()
    e.stopPropagation()

    form = $(e.target)
    @model.unset("errors")

    @postViaHtml(form, 
      success: (topic) =>
        window.router.refreshCollectionAndRenderFor("topics", '/index')

      error: (topic, jqXHR) =>
        self.renderHtml(form, jqXHR.responseText)
    )
  ...
  render: ->
    self = this
    @template(@model.toJSON(), (data) -> 
      self.$el.html(data)
      self.$("form").backboneLink(self.model)

      setTimeout(->
        $("input[name='name']").focus()
      50)
    )

    return self
```

Next we need to tweak the ```Back``` link so that it includes the necessary anchor for Backbone.

E.g., app/views/topics/new.html.erb

```
<%= link_to 'Back', topics_path(anchor: "/index") %>
```

Now we start applying Twitter Bootstrap design elements to our Rails view.

E.g., app/views/topics/new.html.erb

```
<div class="well">
  <div class="page-header">
  <h1>New topic <small></small></h1>
  </div>

  <%= render 'form' %>

  <%= link_to 'Back', topics_path(anchor: "/index") %>
</div>
```

And we continue sprucing up the form itself.  In order to use a horizontal alignment for the form using Twitter Bootstrap, we apply classes
to the ```form``` and ```label``` and then wrap each label/input combination and input in their own ```div``` tags.  The button should also
be styled as the primary button.

E.g., app/views/topics/_form.html.erb

```
<%= form_for(@topic, html: {class: "form form-horizontal #{form_type(@topic)}"}) do |f| %>
...
  <div class="field control-group">
    <%= f.label :name, class: "control-label" %>
    <div class="controls">
      <%= f.text_field :name %>
    </div>
  </div>
  <div class="field control-group">
    <%= f.label :description, class: "control-label" %>
    <div class="controls">
      <%= f.text_area :description %>
    </div>
  </div>
  <div class="actions">
    <%= f.submit nil, class: "btn btn-primary" %>
  </div>
<% end %>

```

### Section

The controller should be adjusted so that when the ```create``` action is called and ```params[:remote]``` is included, no redirect will be sent.
Otherwise, the client is making an additional call for the redirect that will never be used.

E.g., app/controllers/topics_controller.rb, #create

```
    respond_to do |format|
      if @topic.save
        #format.html { redirect_to @topic, notice: 'Topic was successfully created.' }
        format.html { 
          if(params[:remote] == "true")
            render text: "ok" 
          else
            redirect_to @topic, notice: 'Topic was successfully created.'
          end
        }
        format.json { render json: @topic, status: :created, location: @topic }
      else
        format.html { render action: "new", layout: (params[:remote] != "true") }
        format.json { render json: @topic.errors, status: :unprocessable_entity }
      end
    end
```

E.g., app/controllers/topics_controller.rb, #create

```
    respond_to do |format|
      if @topic.save
        #format.html { redirect_to @topic, notice: 'Topic was successfully updated.' }
        format.html { 
          if(params[:remote] == "true")
            render text: "ok" 
          else
            redirect_to @topic, notice: 'Topic was successfully updated.'
          end
        }
        format.json { render json: @topic, status: :created, location: @topic }
      else
        format.html { render action: "edit", layout: (params[:remote] != "true") }
        format.json { render json: @topic.errors, status: :unprocessable_entity }
      end
    end
```

And in order for the ```params[:remote]``` configuration to actually be used, we update the ```_form.html.erb``` to use it.

E.g., app/views/topics/_form.html.erb

```
<%= form_for(@topic, url: topics_path(@topic, remote: "true"), html: {class: "form form-horizontal #{form_type(@topic)}"}) do |f| %>
...
```

### Section

Go through a similar process for edit.  There will be slight differences as noted below.

E.g., app/assets/javascripts/backbone/views/topics/edit_view.js.coffee

```
  template: (model, callback) -> _.template(
    href = $("#edit-topic-from-erb").attr("href").replace(/__xxx__/, model.id)
    console.log("edit href: " + href)
    
    ...
  )

  events:
    "submit .edit-topic": "update"

  ...
  update: (e) ->
    e.preventDefault()
    e.stopPropagation()

    form = $(e.target)
    @model.unset("errors")

    @postViaHtml(form, 
      success: (topic) =>
        window.router.refreshCollectionAndRenderFor("topics", '/index')

      error: (topic, jqXHR) =>
        self.renderHtml(form, jqXHR.responseText)
    )
```

Again, ```edit.html.erb``` will be similarly structured to ```new.html.erb```, but with an additional change.

E.g., app/views/topics/new.html.erb

```
  <%= link_to 'Show', "#/#{@topic.id}" %>
```

### Section

Hide the 'template' links.

```
<%= link_to "New Topic (from ERB) Template", new_topic_path(remote: "true"), id: "new-topic-from-erb", style: "display: none;" %>
<%= link_to "Edit Topic (from ERB) Template", edit_topic_path("__xxx__", remote: "true"), id: "edit-topic-from-erb", style: "display: none;" %>
```

### Section

Apply Twitter Bootstrap design elements to the ```show``` template.

E.g., app/assets/javascripts/backbone/templates/topics/show.jst.ejs

```
<div class="well well-outline">
  <div class="page-header">
  <h1>Show topic <small></small></h1>
  </div>

  <div class="topic-details">
    <p>
      <b>Name:</b>
      <%= name %>
    </p>

    <p>
      <b>Description:</b>
      <%= description %>
    </p>
  </div>

  <a href="#/<%= id %>/edit">Edit</a>
  <a href="#/index">Back</a>
</div>
```

### Section

Add additional key shortcuts for convenience.

E.g., app/views/topics/index_backbone.html.erb

```
<script type="text/javascript">
  $(function() {
    // TimeSheet is the app name
    window.router = new TimeSheet.Routers.TopicsRouter({topics: <%= @topics.to_json.html_safe -%>});
    Backbone.history.start();

    $(document).keyup(function(e){
      if($("#topics-table").length > 0){
        switch(e.keyCode){
          // case 69:
          //   console.log("load edit form")
          //   window.router.newTopic()
          //   break;
          case 78:
            window.router.navigate("/new", {trigger: true});
            break;
          default:
        }
      }

      if($(".topic-details").length > 0){
        switch(e.keyCode){
          // case 69:
          //   console.log("load edit form")
          //   window.router.newTopic()
          //   break;
          case 66:
            window.router.navigate("/index", {trigger: true});
            break;
          default:
        }
      }

      //console.log(e.type, e.keyCode)
    })
  });
</script>
```

### Section


### Section
